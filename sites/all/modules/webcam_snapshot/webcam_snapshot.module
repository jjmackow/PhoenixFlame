<?php
/**
 * @file
 * Hook implementations for Webcam Snapshot module.
 */

/**
 * Implements hook_elements().
 */
function webcam_snapshot_element_info() {
  return array(
    'webcam_snapshot' => array(
      // Will carry a value, albeit hidden.
      '#input' => TRUE,
      '#process' => array('webcam_snapshot_element_process'),
      '#camera_width' => 0,
      '#camera_height' => 720,
      '#video_width' => 0,
      '#video_height' => 360,
      '#image_width' => 240,
      '#image_height' => 320,
      '#selection' => array(
        'top' => 20,
        'left' => 200,
        'right' => 440,
        'bottom' => 340,
      ),
      '#overlay_opacity' => 0.7,
      '#theme' => 'webcam_snapshot',
    ),
  );
}

/**
 * Process callback.
 */
function webcam_snapshot_element_process($element) {
  $element['#attached']['js'][] = drupal_get_path('module', 'webcam_snapshot') . '/webcam_snapshot.js';
  $element['#attached']['js'][] = array(
    'data' => array(
      'webcam_snapshot' => array(
        'id' => $element['#id'],
        'cameraWidth' => $element['#camera_width'],
        'cameraHeight' => $element['#camera_height'],
        'videoWidth' => $element['#video_width'],
        'videoHeight' => $element['#video_height'],
        'destinationSize' => array($element['#image_width'], $element['#image_height']),
        'selection' => $element['#selection'],
        'overlayOpacity' => $element['#overlay_opacity'],
      ),
    ),
    'type' => 'setting',
  );
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function webcam_snapshot_field_widget_info() {
  return array(
    'webcam_snapshot' => array(
      'label' => t('Webcam snapshot'),
      'field types' => array('file', 'image'),
      'settings' => array(
        'camera' => array(
          'width' => 0,
          'height' => 720,
        ),
        'video' => array(
          'width' => 0,
          'height' => 360,
          'overlay_opacity' => 0.7,
        ),
        'image' => array(
          'width' => 240,
          'height' => 320,
        ),
        'selection' => array(
          'top' => 20,
          'left' => 200,
          'right' => 440,
          'bottom' => 340,
        ),
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function webcam_snapshot_field_widget_settings_form($field, $instance) {
  if (strpos($instance['settings']['file_extensions'], 'jpg') === FALSE) {
    drupal_set_message(t('The webcam snapshot is saved as a .jpg file. The jpg extension needs to be added to the allowed extensions for this field instance.'), 'error');
  }
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form = array();
  $form['camera'] = array(
    '#type' => 'fieldset',
    '#title' => t('Camera'),
    '#description' => t('Minimum size of video stream requested from camera. Note that the actual size returned may be larger than these values and that you cannot accurately predict the aspect ratio of the stream returned.'),
  );
  $form['camera']['width'] = array(
    '#type' => 'textfield',
    '#element_validate' => array('element_validate_integer'),
    '#min' => 0,
    '#title' => t('Width'),
    '#default_value' => $settings['camera']['width'],
    '#required' => TRUE,
  );
  $form['camera']['height'] = array(
    '#type' => 'textfield',
    '#element_validate' => array('element_validate_integer'),
    '#min' => 0,
    '#title' => t('Height'),
    '#default_value' => $settings['camera']['height'],
    '#required' => TRUE,
  );
  $form['video'] = array(
    '#type' => 'fieldset',
    '#title' => t('Video preview'),
    '#description' => t('Configure the live video window. It is recommended to leave either width or height as zero; the element will resize to the correct aspect ratio.'),
  );
  $form['video']['width'] = array(
    '#type' => 'textfield',
    '#element_validate' => array('element_validate_integer'),
    '#min' => 0,
    '#title' => t('Width'),
    '#description' => t('Width of the video preview element in pixels.'),
    '#default_value' => $settings['video']['width'],
    '#required' => TRUE,
  );
  $form['video']['height'] = array(
    '#type' => 'textfield',
    '#element_validate' => array('element_validate_integer'),
    '#min' => 0,
    '#title' => t('Height'),
    '#description' => t('Height of the video preview element in pixels.'),
    '#default_value' => $settings['video']['height'],
    '#required' => TRUE,
  );
  $form['video']['overlay_opacity'] = array(
    '#type' => 'textfield',
    '#element_validate' => array('element_validate_number'),
    '#title' => t('Overlay opacity'),
    '#description' => t('Opacity of the overlay that dims the video outside of the selected area.'),
    '#default_value' => $settings['video']['overlay_opacity'],
    '#required' => TRUE,
  );
  $form['selection'] = array(
    '#type' => 'fieldset',
    '#title' => t('Initial selection'),
    '#description' => t('Configure the initial selection size. It is recommended to specify a rectangle of the same aspect ratio as the captured image size below and within the bounds of the video preview window above.'),
    '#tree' => TRUE,
  );
  $form['selection']['top'] = array(
    '#type' => 'textfield',
    '#element_validate' => array('element_validate_integer'),
    '#min' => 0,
    '#title' => t('Top'),
    '#default_value' => $settings['selection']['top'],
    '#required' => TRUE,
  );
  $form['selection']['left'] = array(
    '#type' => 'textfield',
    '#element_validate' => array('element_validate_integer'),
    '#min' => 0,
    '#title' => t('Left'),
    '#default_value' => $settings['selection']['left'],
    '#required' => TRUE,
  );
  $form['selection']['bottom'] = array(
    '#type' => 'textfield',
    '#element_validate' => array('element_validate_integer'),
    '#min' => 0,
    '#title' => t('Bottom'),
    '#default_value' => $settings['selection']['bottom'],
    '#required' => TRUE,
  );
  $form['selection']['right'] = array(
    '#type' => 'textfield',
    '#element_validate' => array('element_validate_integer'),
    '#min' => 0,
    '#title' => t('Right'),
    '#default_value' => $settings['selection']['right'],
    '#required' => TRUE,
  );
  $form['image'] = array(
    '#type' => 'fieldset',
    '#title' => 'Captured image',
    '#description' => t('Configure the size of the captured image'),
  );
  $form['image']['width'] = array(
    '#type' => 'textfield',
    '#element_validate' => array('element_validate_integer'),
    '#min' => 0,
    '#title' => t('Width'),
    '#default_value' => $settings['image']['width'],
    '#required' => TRUE,
  );
  $form['image']['height'] = array(
    '#type' => 'textfield',
    '#element_validate' => array('element_validate_integer'),
    '#min' => 0,
    '#title' => t('Height'),
    '#default_value' => $settings['image']['height'],
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function webcam_snapshot_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $settings = $instance['widget']['settings'];
  $element += array(
    '#type' => 'webcam_snapshot',
    '#camera_width' => $settings['camera']['width'],
    '#camera_height' => $settings['camera']['height'],
    '#video_width' => $settings['video']['width'],
    '#video_height' => $settings['video']['height'],
    '#overlay_opacity' => $settings['video']['overlay_opacity'],
    '#selection' => $settings['selection'],
    '#image_width' => $settings['image']['width'],
    '#image_height' => $settings['image']['height'],
    '#value_callback' => 'webcam_snapshot_field_widget_form_value_callback',
    '#default_value' => isset($items[$delta]) ? $items[$delta] : NULL,
    '#upload_location' => file_field_widget_uri($field, $instance),
  );
  return $element;
}

/**
 * Value callback.
 */
function webcam_snapshot_field_widget_form_value_callback($element, $input = FALSE) {
  if ($input !== FALSE && strpos($input, 'data:') === 0) {
    $filename = 'webcam_snapshot_' . format_date(REQUEST_TIME, 'custom', 'Y_m_d_H_i_s') . '.jpg';
    file_prepare_directory($element['#upload_location'], FILE_CREATE_DIRECTORY);
    $file = file_save_data(file_get_contents($input), $element['#upload_location'] . '/' . $filename, FILE_EXISTS_RENAME);
    if ($file) {
      return array(
        'fid' => $file->fid,
        'display' => TRUE,
        'width' => $element['#image_width'],
        'height' => $element['#image_height'],
      );
    }
  }
  elseif (!empty($element['#default_value'])) {
    return $element['#default_value'];
  }

  return NULL;
}

/**
 * Implements hook_theme().
 */
function webcam_snapshot_theme() {
  return array(
    'webcam_snapshot' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Default theme function for webcam_snapshot form element.
 */
function theme_webcam_snapshot($variables) {
  $element = $variables['element'];

  $img = '<div class="webcam--component webcam--img"><img style="display:block; border: 1px solid #888; background: #EEE"';
  if ($element['#value']) {
    $img .= ' src="' . (is_array($element['#value']) ? file_create_url($element['#value']['uri']) : check_plain($element['#value'])) . '"';
  }
  if ($element['#image_width']) {
    $img .= ' width="' . $element['#image_width'] . '"';
  }
  if ($element['#image_height']) {
    $img .= ' height="' . $element['#image_height'] . '"';
  }
  $img .= ' /></div>';

  $button = '<div class="webcam--component webcam--button"><input type="button" value="' . t('Capture') . '" style="display: block" /></div>';

  $video = '<div class="webcam--component webcam--video"><video style="border: 1px solid #888; display: block"';
  if ($element['#video_width']) {
    $video .= ' width="' . $element['#video_width'] . '"';
  }
  if ($element['#video_height']) {
    $video .= ' height="' . $element['#video_height'] . '"';
  }
  $video .= '>';
  $video .= t('Your browser does not support the video tag.') . '</video></div>';

  $field = '<input type="hidden" name="' . $element['#name'] . '"';
  $field .= ' id="' . $element['#id'] . '"';
  $field .= ' value="' . (is_array($element['#value']) ? $element['#value']['fid'] : check_plain($element['#value'])) . '"';
  $field .= drupal_attributes($element['#attributes']);
  $field .= ' />';

  return theme('form_element', $element) . $img . $video . $button . $field;
}
