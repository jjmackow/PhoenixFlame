<?php

/**
 * @file
 * This module enables Heartland Payment Systems payment gateway integration
 * to Drupal Commerce while using SecureSubmit (jQuery tokenization) to ensure
 * PCI-friendliness.
 */

define('SECURESUBMIT_PUBLIC_KEY', '');
define('SECURESUBMIT_SECRET_KEY', '');

/**
 * Implements hook_libraries_info().
 */
function commerce_securesubmit_libraries_info() {
  return array(
    'hps' => array(
      'name' => 'SecureSubmit PHP SDK',
      'vendor url' => 'https://developer.heartlandpaymentsystems.com/SecureSubmit/',
      'download url' => 'https://github.com/SecureSubmit/heartland-php',
      'dependencies' => array(),
      'version arguments' => array(
        'file' => 'VERSION',
        'pattern' => '/(\d+\.\d+(\.\d+)?)/',
      ),
      'files' => array(
        'php' => array(
          'Hps.php',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_securesubmit_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_securesubmit'] = array(
    'title' => _commerce_securesubmit_load_setting('display_title', t('SecureSubmit')),
    'description' => t('Heartland Payment Systems payment gateway'),
    'active' => FALSE,
    'terminal' => FALSE,
    'offsite' => FALSE,
  );

  return $payment_methods;
}

/**
 * Payment method settings form.
 *
 * @param $settings
 *   Default settings provided from rules
 *
 * @return array
 *   Settings form array
 */
function commerce_securesubmit_settings_form($settings) {
  $form = array();
  $form['securesubmit_currency'] = array(
    '#type' => 'select',
    '#title' => t('Currency'),
    '#options' => array(
      'USD' => t('USD'),
    ),
    '#description' => t('Select the currency that you are using.'),
    '#default_value' => !empty($settings['securesubmit_currency']) ? $settings['securesubmit_currency'] : 'USD',
  );
  $form['public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Public Api Key'),
    '#description' => t('Public Api Key. Get your key from https://developer.heartlandpaymentsystems.com/SecureSubmit'),
    '#default_value' => !empty($settings['public_key']) ? $settings['public_key'] : SECURESUBMIT_PUBLIC_KEY,
    '#required' => TRUE,
  );
  $form['secret_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret Api Key'),
    '#description' => t('Secret Api Key. Get your key from https://developer.heartlandpaymentsystems.com/SecureSubmit'),
    '#default_value' => !empty($settings['secret_key']) ? $settings['secret_key'] : SECURESUBMIT_SECRET_KEY,
    '#required' => TRUE,
  );
  $form['display_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Payment method display title'),
    '#description' => t('Payment method display title'),
    '#default_value' => !empty($settings['display_title']) ? $settings['display_title'] : t('Credit Card'),
  );

  return $form;
}

function _commerce_securesubmit_credit_card_form() {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  $credit_card_fields = array(
    'owner' => '',
    'number' => '',
    'exp_month' => '',
    'exp_year' => '',
    'code' => '',
  );

  $form = commerce_payment_credit_card_form($credit_card_fields);

  foreach (array_keys($credit_card_fields) as $key) {
    $credit_card_field = &$form['credit_card'][$key];
    $credit_card_field['#attributes']['class'][] = 'securesubmit';
    $credit_card_field['#required'] = FALSE;
    $credit_card_field['#post_render'][] = '_commerce_securesubmit_credit_card_field_remove_name';
  }

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_securesubmit_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = _commerce_securesubmit_credit_card_form();

  // Set our key to settings array.
  drupal_add_js(array('securesubmit' => array('publicKey' => $payment_method['settings']['public_key'])), 'setting');

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'commerce_securesubmit') . '/secure.submit-1.0.2.js',
    drupal_get_path('module', 'commerce_securesubmit') . '/commerce_securesubmit.js',
  );

  // To display validation errors.
  $form['errors'] = array(
    '#type' => 'markup',
    '#markup' => '<div class="payment-errors"></div>',
  );

  return $form;
}

function _commerce_securesubmit_credit_card_field_remove_name($content, $element) {
  $name_pattern = '/\sname\s*=\s*[\'"]?' . preg_quote($element['#name']) . '[\'"]?/';
  return preg_replace($name_pattern, '', $content);
}


/**
 * Payment method callback: checkout form submission.
 */
function commerce_securesubmit_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  if (!class_exists('HpsServicesConfig')) {
    $path = function_exists('libraries_get_path') ?
      libraries_get_path('hps') : 'sites/all/libraries/hps';
    if (!include($path . '/Hps.php')) {
        // handle this error
    }
  }

  $config = new HpsServicesConfig();
  $config->secretApiKey = $payment_method['settings']['secret_key'];

  $config->versionNumber = '0000';
  $config->developerId = '000000';

  $chargeService = new HpsCreditService($config);

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  if ($order_wrapper->commerce_customer_billing->value()){
    $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
  }

  if (empty($billing_address['first_name'])) {
    $name_parts = explode(' ', $billing_address['name_line']);
    $billing_address['first_name'] = array_shift($name_parts);
    $billing_address['last_name'] = implode(' ', $name_parts);
  }

  // figure out how to get the address information
  $address = new HpsAddress();
  $address->address = $billing_address['thoroughfare'];
  $address->city = $billing_address['locality'];
  $address->state = $billing_address['administrative_area'];
  $address->zip = preg_replace('/[^0-9]/', '', $billing_address['postal_code']);
  $address->country = $billing_address['country'];

  // same with this stuff:
  $validCardHolder = new HpsCardHolder();
  $validCardHolder->firstName = $billing_address['first_name'];
  $validCardHolder->lastName = $billing_address['last_name'];
  $validCardHolder->address = $address;

  $suToken = new HpsTokenData();
  $suToken->tokenValue = $_POST['securesubmitToken'];

  $transaction = commerce_payment_transaction_new('commerce_securesubmit', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];

  try {
    $response = $chargeService->charge(
                number_format(commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']), 2, '.', ''),
                $payment_method['settings']['securesubmit_currency'],
                $suToken,
                $validCardHolder);

    $transaction->remote_id = $response->transactionId;
    $transaction->payload[REQUEST_TIME] = time();
    $transaction->message = t('Payment completed successfully.');
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    commerce_payment_transaction_save($transaction);
  }
  catch (Exception $e) {
    drupal_set_message(t('We received the following error processing your card. Please enter your information again or try a different card.'), 'error');
    drupal_set_message(check_plain($e->getMessage()), 'error');
    watchdog('commerce_securesubmit', 'Following error received when processing card @securesubmit_error.', array('@securesubmit_error' => $e->getMessage()), WATCHDOG_NOTICE);
    //$transaction->remote_id = $e->getTransactionId();
    $transaction->payload[REQUEST_TIME] = time();
    $transaction->message = t('Card processing error: @securesubmit_error', array('@securesubmit_error' => $e->getMessage()));
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    commerce_payment_transaction_save($transaction);
    return FALSE;
  }
}

/**
 * Implements hook_commerce_payment_method_info_alter().
 *
 * Displays a warning if they keys aren't set or if user can't change payment methods.
 */
function commerce_securesubmit_commerce_payment_method_info_alter(&$payment_methods) {
  if (isset($payment_methods['commerce_securesubmit'])) {
    $settings = _commerce_securesubmit_load_settings();

    if (empty($settings['secret_key']) || empty($settings['public_key'])) {
      if (user_access('administer payment methods')) {
        drupal_set_message('SecureSubmit secret and public key are required in order to use the Heartland Payment Systems gateway. See README.txt for instructions.', 'warning');
      }
    }
  }
}

function _commerce_securesubmit_load_settings($name = NULL) {
  static $settings = array();

  if (!empty($settings)) {
    return $settings;
  }

  if (commerce_payment_method_load('commerce_securesubmit') && rules_config_load('commerce_payment_commerce_securesubmit')) {
    $commerce_securesubmit_payment_method = commerce_payment_method_instance_load('commerce_securesubmit|commerce_payment_commerce_securesubmit');
  }

  if (isset($name) && rules_config_load('commerce_payment_commerce_securesubmit')) {
    $commerce_securesubmit_payment_method = commerce_payment_method_instance_load('commerce_securesubmit|commerce_payment_commerce_securesubmit');
  }

  if (isset($commerce_securesubmit_payment_method)) {
    $settings = $commerce_securesubmit_payment_method['settings'];
  }

  return $settings;
}

function _commerce_securesubmit_load_setting($name, $default_value = NULL) {
  $settings = _commerce_securesubmit_load_settings($name);
  return isset($settings[$name]) ? $settings[$name] : $default_value;
}

/**
 * Loads the SecureSubmit SDK
 */
function commerce_securesubmit_load_library() {
  $library = libraries_load('hps');
  if (!$library || empty($library['loaded'])) {
    watchdog('commerce_securesubmit', 'Failed to load SecureSubmit SDK.', array(), WATCHDOG_CRITICAL);
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * implements hook_field_widget_WIDGET_TYPE_form_alter
 *
 * set unique classes on address input fields to guarantee commerce_securesubmit.js can find them
 *
 * @param $element
 * @param $form_state
 * @param $context
 */
function commerce_securesubmit_field_widget_addressfield_standard_form_alter(&$element, &$form_state, $context) {
  if(!in_array('field',$context)){
    return;
  } 
  elseif (!$context['field']['field_name'] == 'commerce_customer_address') {
      return;
  }
  commerce_securesubmit_set_addressfield_class_names($element);
}

/**
 * Sets unique class names on address field form elements so that they can be
 * picked up by commerce_securesubmit.js.
 *
 * @param $element
 *   the addressfield form element
 */
function commerce_securesubmit_set_addressfield_class_names(&$element) {
  if (isset($element['street_block']['thoroughfare'])) {
    $element['street_block']['thoroughfare']['#attributes']['class'][] = 'commerce-securesubmit-thoroughfare';
  }
  if (isset($element['street_block']['premise'])) {
    $element['street_block']['premise']['#attributes']['class'][] = 'commerce-securesubmit-premise';
  }
  if (isset($element['locality_block']['locality'])) {
    $element['locality_block']['locality']['#attributes']['class'][] = 'commerce-securesubmit-locality';
  }
  if (isset($element['locality_block']['administrative_area'])) {
    $element['locality_block']['administrative_area']['#attributes']['class'][] = 'commerce-securesubmit-administrative-area';
  }
  if (isset($element['locality_block']['postal_code'])) {
    $element['locality_block']['postal_code']['#attributes']['class'][] = 'commerce-securesubmit-postal-code';
  }
  if (isset($element['country'])) {
    $element['country']['#attributes']['class'][] = 'commerce-securesubmit-country';
  }
}
