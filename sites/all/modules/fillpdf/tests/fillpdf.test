<?php

trait FillPdfTestHelper {

  protected $privileged_user;

  protected function createPrivilegedUser() {
    // Meh. Caching.
    drupal_static_reset('checkPermissions');

    // Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser(array(
      'access administration pages',
      'administer pdfs',
      'publish all pdfs',
    ));
    $this->drupalLogin($this->privileged_user);
  }

  protected function uploadTestPdf() {
    $this->drupalPost('admin/structure/fillpdf', array(
      'files[upload_pdf]' => drupal_realpath(drupal_get_path('module', 'fillpdf') . '/tests/fillpdf_test_v4.pdf'),
    ), t('Upload'));
  }

  protected function configureBackend() {
    variable_set('fillpdf_service', 'test');
    variable_set('fillpdf_scheme', 'private');
  }

  /**
   * @return mixed
   */
  protected function getLatestFillPdfForm() {
    // Get the fid of the uploaded file to construct the link.
    $max_fid_after_result = db_query('select MAX(fid) AS fid from {fillpdf_forms};')
      ->fetchField();
    return $max_fid_after_result;
  }

}

/**
 * @file
 * Contains tests for the module.
 */

/**
 * Tests the PDF handling functions of the API (a.k.a. the whole API).
 */
class FillPdfTestCase extends FileFieldTestCase {

  use FillPdfTestHelper;

  protected $nonPrivilegedUser;

  public static function getInfo() {
    // Note: getInfo() strings are not translated with t().
    return array(
      'name' => 'FillPDF (General)',
      'description' => 'Ensure that FillPDF administration functions are present and work.',
      'group' => 'FillPDF',
    );
  }

  public function setUp() {
    // Enable any modules required for the test. This should be an array of
    // module names.
    parent::setUp(array('fillpdf', 'fillpdf_test'));

    $this->createPrivilegedUser();

    $this->nonPrivilegedUser = $this->drupalCreateUser();
  }

  public function testPdfUpload() {
    $this->drupalGet('admin/structure/fillpdf');
  }

  /**
   * Ensure that fillpdf_link_from_context() functions properly.
   */
  public function testLinkFromContext() {
    // @todo: flesh out with more combinations. This one was most broken,
    // though.
    $fid = 1;

    $fake_webform = new stdClass();
    $fake_webform->nid = 123;
    $fake_submission = new stdClass();
    $fake_submission->sid = 456;

    $fake_context = array(
      'nodes' => array(),
      'webforms' => array(
        array(
          'webform' => $fake_webform,
          'submission' => $fake_submission,
        ),
      ),
      'uc_orders' => array(),
      'uc_order_products' => array(),
    );

    // We also add the base domain to our expected link so that they come out
    // the same.
    $expected_link = url('', array('absolute' => TRUE)) . 'fillpdf?fid=1&webforms[0][nid]=123&webforms[0][sid]=456';
    $actual_link = fillpdf_context_to_link($fid, $fake_context);

    $this->assertEqual($expected_link, $actual_link, 'fillpdf_context_to_link() generates a link with a single Webform correctly.');

    $fake_multiple_context = array(
      'nodes' => array(),
      'webforms' => array(
        array(
          'webform' => $fake_webform,
          'submission' => $fake_submission,
        ),
        array(
          'webform' => (object) array('nid' => 234),
          'submission' => (object) array('sid' => 567),
        ),
        array(
          'webform' => (object) array('nid' => 345),
          'submission' => (object) array('sid' => 678),
        ),
      ),
      'uc_orders' => array(),
      'uc_order_products' => array(),
    );

    // We also add the base domain to our expected link so that they come out
    // the same.
    $expected_link2 = url('', array('absolute' => TRUE)) . 'fillpdf?fid=1&webforms[0][nid]=123&webforms[0][sid]=456&webforms[1][nid]=234&webforms[1][sid]=567&webforms[2][nid]=345&webforms[2][sid]=678';
    $actual_link2 = fillpdf_context_to_link($fid, $fake_multiple_context);

    $this->assertEqual($expected_link2, $actual_link2, 'fillpdf_context_to_link() generates a link with multiple Webforms correctly.');
  }

  /**
   * Make sure that file access works properly.
   */
  public function testFileAccess() {
    $this->createFileField('field_pdf', 'page');

    // Make a basic page.
    $new_node = new stdClass();
    $new_node->type = 'page';
    $new_node->title = t('Test node');
    $new_node->field_body = array(
      LANGUAGE_NONE => array(
        0 => array(
          'value' => 'This is test text.',
        ),
      ),
    );
    $new_node->uid = 1;
    node_save($new_node);

    $this->configureBackend();

    // Upload a template.
    $this->uploadTestPdf();

    $fid = $this->getLatestFillPdfForm();
    db_update('fillpdf_forms')
      ->fields(array('destination_path' => 'output'))
      ->condition('fid', $fid)
      ->execute();

    $fillpdf_object = fillpdf_merge_pdf($fid, array($new_node->nid), NULL, NULL, FALSE, FALSE, TRUE, FALSE);
    $saved_file = fillpdf_action_save_to_file($fillpdf_object, 'fillpdf_test_v4.pdf', FALSE, FALSE);
    $saved_file->display = 1;

    $new_node->field_pdf = array(
      LANGUAGE_NONE => array(
        0 => (array) $saved_file,
      ),
    );
    node_save($new_node);

    $this->drupalGet("node/{$new_node->nid}");
    $this->assertResponse(403, 'Access properly denied for non-admin.');

    $this->drupalGet('system/files/fillpdf/output/fillpdf_test_v4.pdf');
    $this->assertResponse(200, 'User can generate and access PDF from any data when they have the Publish All PDFs permission.');

    $this->drupalLogin($this->nonPrivilegedUser);
    $this->drupalGet('system/files/fillpdf/output/fillpdf_test_v4.pdf');
    $this->assertResponse(403, 'User without Administer PDFs and without Publish All PDFs cannot access PDF they cannot view the node for.');
  }

}

/**
 * Tests that PDF population and token replacement works.
 */
class FillPdfMergeTestCase extends ImageFieldTestCase {

  use FillPdfTestHelper;

  protected $testNode;

  public static function getInfo() {
    // Note: getInfo() strings are not translated with t().
    return array(
      'name' => 'FillPDF (Merging)',
      'description' => 'Ensure that token and image replacement work.',
      'group' => 'FillPDF',
    );
  }

  public function setUp() {
    parent::setUp();

    // ImageFieldTestCase::setUp() is dumb, so we have to enable some modules ourselves.
    $modules = array('fillpdf', 'fillpdf_test_webform', 'fillpdf_test');
    $success = module_enable($modules, TRUE);
    $this->assertTrue($success, t('Enabled modules: %modules', array('%modules' => implode(', ', $modules))));

    $this->createPrivilegedUser();
    $this->configureBackend();

    $existing_roles = array_keys($this->privileged_user->roles);
    $granted_rid = end($existing_roles);
    user_role_change_permissions($granted_rid, array(
      'administer nodes' => TRUE,
      'access all webform results' => TRUE,
      'edit all webform submissions' => TRUE,
      'edit webform components' => TRUE,
    ));
  }

  public function testPdfMerging() {
    features_revert_module('fillpdf_test_webform');

    // Can we get to the Webform we created?
    $webform = webform_features_machine_name_load('fillpdf_test_webform');
    $this->assertTrue(property_exists($webform, 'nid'), 'Webform properly loaded from Features.');

    // TODO: continue imitating D8 version. Create an image field (and content type, etc., if necessary).
    $this->createImageField('field_fillpdf_test_image', 'article');
    $files = $this->drupalGetTestFiles('image');
    $image = reset($files);

    // Clear cache and grant more permissions to ensure ability to create nodes.
    $existing_roles = array_keys($this->privileged_user->roles);
    $granted_rid = end($existing_roles);
    user_role_change_permissions($granted_rid, array(
      'create webform content' => TRUE,
      'create article content' => TRUE,
    ));

    // TODO: Which user is actually logged in???
    $this->testNode = node_load($this->uploadNodeImage($image, 'field_fillpdf_test_image', 'article'));

    // Test with a node.
    $this->uploadTestPdf();
    $fillpdf_form = fillpdf_load($this->getLatestFillPdfForm());

    // Get the field definitions for the form that was created and configure
    // them.
    $fields = fillpdf_get_fields($fillpdf_form->fid);
    foreach ($fields as $pdf_key => $field) {
      switch ($pdf_key) {
        case 'ImageField':
          $field['value'] = '[node:field_fillpdf_test_image]';
          break;

        case 'TextField':
          $field['value'] = '[node:title]';
          break;
      }
      fillpdf_fields_create_update($fillpdf_form->fid, $pdf_key, $field, TRUE);
    }

    // Hit the FillPDF URL, check the results from the test fill method.
    $this->drupalGet('fillpdf', array(
      'query' => array(
        'fid' => $fillpdf_form->fid,
        'nid' => $this->testNode->nid,
      ),
    ));

    // We don't actually care about downloading the fake PDF. We just want to
    // check what happened in the backend.
    $merge_result = variable_get('fillpdf_test_last_merge_metadata');

    $this->assertEqual(
      $merge_result['fields']['TextField'],
      $this->testNode->title,
      'PDF is populated with the title of the node.'
    );

    $field_fillpdf_test_image = field_get_items('node', $this->testNode, 'field_fillpdf_test_image');
    $node_file = file_load($field_fillpdf_test_image[0]['fid']);
    $this->assertEqual(
      $merge_result['images']['ImageField']['data'],
      base64_encode(file_get_contents($node_file->uri)),
      'Encoded image matches known image.'
    );

    $path_info = pathinfo($node_file->uri);
    $expected_file_hash = md5($path_info['filename']) . '.' . $path_info['extension'];
    $this->assertEqual(
      $merge_result['images']['ImageField']['filenamehash'],
      $expected_file_hash,
      'Hashed filename matches known hash.'
    );

    $this->assertEqual(
      $merge_result['fields']['ImageField'],
      '{image}' . drupal_realpath($node_file->uri),
      'URI in metadata matches expected URI.'
    );

    // Test the legacy [stamp] pseudo-token.
    $fields = fillpdf_get_fields($fillpdf_form->fid);
    foreach ($fields as $pdf_key => $field) {
      switch ($pdf_key) {
        case 'ImageField':
          $field['value'] = '[stamp:field_fillpdf_test_image]';
          break;
      }
      fillpdf_fields_create_update($fillpdf_form->fid, $pdf_key, $field, TRUE);
    }
    // Hit the FillPDF URL, check the results from the test fill method.
    $this->drupalGet('fillpdf', array(
      'query' => array(
        'fid' => $fillpdf_form->fid,
        'nid' => $this->testNode->nid,
      ),
    ));
    // We don't actually care about downloading the fake PDF. We just want to
    // check what happened in the backend.
    $merge_result = variable_get('fillpdf_test_last_merge_metadata');

    $this->assertTrue($merge_result['flatten'], 'PDF is set to be flattened.');

    $this->assertEqual(
      $merge_result['images']['ImageField']['data'],
      base64_encode(file_get_contents($node_file->uri)),
      'Legacy: Encoded image matches known image.'
    );

    $this->assertEqual(
      $merge_result['images']['ImageField']['filenamehash'],
      $expected_file_hash,
      'Legacy: Hashed filename matches known hash.'
    );

    $this->assertEqual(
      $merge_result['fields']['ImageField'],
      '{image}' . drupal_realpath($node_file->uri),
      'Legacy: URI in metadata matches expected URI.'
    );

    // Test Webform image filling.
    $this->uploadTestPdf();
    $fillpdf_form2 = fillpdf_load($this->getLatestFillPdfForm());

    // Create a test submission for our test Webform.
    $this->drupalPost(
      "node/{$webform->nid}",
      array(
        'files[submitted_image_field]' => drupal_realpath($image->uri),
      ),
      t('Submit'));

    // Get the submission.
    $url_parts = drupal_parse_url($this->getUrl());
    module_load_include('inc', 'webform', 'includes/webform.submissions');
    $submission = webform_get_submission($webform->nid, $url_parts['query']['sid']);

    // Get the field definitions for the form that was created and configure
    // them.
    $fields = fillpdf_get_fields($fillpdf_form2->fid);
    foreach ($fields as $pdf_key => $field) {
      switch ($pdf_key) {
        case 'ImageField':
          $field['value'] = '[submission:values:image_field]';
          break;

        case 'TextField':
          $field['value'] = '[node:title]';
          break;
      }
      fillpdf_fields_create_update($fillpdf_form2->fid, $pdf_key, $field, TRUE);
    }

    // Hit the FillPDF URL, check the results from the test fill method.
    $this->drupalGet('fillpdf', array(
      'query' => array(
        'fid' => $fillpdf_form2->fid,
        'webforms[0][nid]' => $webform->nid,
        'webforms[0][sid]' => $submission->sid,
      ),
    ));
    // We don't actually care about downloading the fake PDF. We just want to
    // check what happened in the backend.
    $merge_result = variable_get('fillpdf_test_last_merge_metadata');

    $this->assertEqual(
      $merge_result['fields']['TextField'],
      $webform->title,
      'PDF is populated with the title of the Webform node.'
    );

    // Find the image_field component.
    $image_field_cid = NULL;
    foreach ($webform->webform['components'] as $cid => $component) {
      if ($component['form_key'] === 'image_field') {
        $image_field_cid = $cid;
        break;
      }
    }
    $webform_file = file_load($submission->data[$image_field_cid][0]);
    $this->assertEqual(
      $merge_result['images']['ImageField']['data'],
      base64_encode(file_get_contents($webform_file->uri)),
      'Encoded image matches known image.'
    );

    $path_info = pathinfo($webform_file->uri);
    $expected_file_hash = md5($path_info['filename']) . '.' . $path_info['extension'];
    $this->assertEqual(
      $merge_result['images']['ImageField']['filenamehash'],
      $expected_file_hash,
      'Hashed filename matches known hash.'
    );

    $this->assertEqual(
      $merge_result['fields']['ImageField'],
      '{image}' . drupal_realpath($webform_file->uri),
      'URI in metadata matches expected URI.'
    );
  }

}
